#!/usr/bin/env python3

from argparse import ArgumentParser
import logging
import sys

import mevlib.analyze
import mevlib.insertion
import mevlib.tips

log = logging.getLogger(__name__)


def parse_args():
    # General parsing
    parser = ArgumentParser()
    parser.add_argument(
        "-l",
        "--log-level",
        type=str,
        help="The log level to be written to stdout.",
        default="ERROR",
        choices=["DEBUG", "INFO", "WARN", "ERROR", "CRITICAL"],
    )
    subparsers = parser.add_subparsers()

    # Tips subcommand parsing
    parser_tips = subparsers.add_parser(
        "tips", help="Analyzing tips (gas fees and mining rewards)."
    )
    parser_tips.set_defaults(func=mevlib.tips.calculate_tip_arg)
    parser_tips.add_argument(
        "data_file",
        type=str,
        help="Path to file containing blocks/transactions to analyze",
    )

    # Insertion detection subcommand parsing
    parser_detection = subparsers.add_parser(
        "detection", help="Tools for detecting insertion attacks."
    )
    parser_detection.set_defaults(func=mevlib.insertion.main_args)
    parser_detection.add_argument(
        "block_range_start",
        type=int,
        help="The first block in the block range to analyze",
    )
    parser_detection.add_argument(
        "block_range_end",
        type=int,
        help="The last block in the block range to analyze",
    )

    # Analysis subcommand parsing
    parser_analyze = subparsers.add_parser(
        "analyze", help="Tools for analyzing and plotting outputs."
    )
    parser_analyze.set_defaults(func=mevlib.analyze.main)
    parser_analyze.add_argument(
        "data_file",
        type=str,
        help="Path to CSV file containing extracted MEV transactions.",
    )
    # parser_detection.add_argument(
    #     "block_range_end",
    #     type=int,
    #     help="The last block in the block range to analyze",
    # )

    return parser.parse_args()


def main():
    args = parse_args()
    logging.basicConfig(stream=sys.stdout, filemode="w", level=args.log_level.upper())
    args.func(args)

if __name__ == "__main__":
    main()
